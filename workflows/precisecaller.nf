/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    IMPORT MODULES / SUBWORKFLOWS / FUNCTIONS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
include { FASTQC                 } from '../modules/nf-core/fastqc/main'
include { MULTIQC                } from '../modules/nf-core/multiqc/main'
include { paramsSummaryMap       } from 'plugin/nf-schema'
include { paramsSummaryMultiqc   } from '../subworkflows/nf-core/utils_nfcore_pipeline'
include { softwareVersionsToYAML } from '../subworkflows/nf-core/utils_nfcore_pipeline'
include { methodsDescriptionText } from '../subworkflows/local/utils_nfcore_precisecaller_pipeline'
include { SAMTOOLS_BAM2FQ        } from '../modules/nf-core/samtools/bam2fq/main'
include { FASTP                  } from '../modules/nf-core/fastp/main'
include { BWA_MEM                } from '../modules/nf-core/bwa/mem/main'

// Create umi consensus bams from fastq
include { FASTQ_FILTER_UMI_CONSENSUS_FGBIO } from '../../subworkflows/local/fastq_filter_umi_consensus_fgbio/main'

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    RUN MAIN WORKFLOW
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

workflow PRECISECALLER {
    take:
    samplesheet // channel: samplesheet read in from --input
    fasta
    fasta_fai
    dict
    bwa
    umi_file

    main:
    versions      = Channel.empty()
    multiqc_files = Channel.empty()

    /*
    ~~~~~~~~~~~~~~~~~~~~~~
       PREPROCESSING
    ~~~~~~~~~~~~~~~~~~~~~~
    */

    // Add readgroup to meta
    fastq = samplesheet.map { meta, files ->
        def rg = extractReadGroup(meta, files, params.seq_center, params.seq_platform, log)
        [ meta + [ read_group: rg ], files ]
    }

    // STEP 0: QC, UMI & TRIM //

    // MODULE: Run FastQC
    FASTQC(fastq)

    multiqc_files = multiqc_files.mix(FASTQC.out.zip.collect{it[1]})
    versions      = versions.mix(FASTQC.out.versions.first())

    // The BAM file will be generated by umi pipeline or by
    // alignment
    bam = Channel.empty()

    // TODO: Verify sorting. The last alignment must be sorted
    // UMI consensus calling
    if (params.umi_read_structure) {
        FASTQ_FILTER_UMI_CONSENSUS_FGBIO(
            fastq,
            fasta,
            dict,
            bwa,
            umi_file,
            params.umi_file_max_mismatches,
            params.umi_file_min_distance,
            params.group_by_umi_strategy,
            params.umi_min_reads,
            params.umi_min_base_quality,
            params.umi_max_base_error_rate
        )

        bam      = FASTQ_FILTER_UMI_CONSENSUS_FGBIO.out.bam
        versions = versions.mix(FASTQ_FILTER_UMI_CONSENSUS_FGBIO.out.versions)
    }

    // TRIM
    if (params.trim_fastq) {
        if (params.umi_read_structure) {
            // Convert BAM to FASTQ
            split = false
            SAMTOOLS_BAM2FQ(bam, split)

            fastq    = SAMTOOLS_BAM2FQ.out.reads
            versions = versions.mix(SAMTOOLS_BAM2FQ.out.versions)
        }

        save_trimmed_fail = false
        save_merged       = false

        FASTP(
            fastq,
            [],                // we are not using any adapter fastas at the moment
            false,             // we don't use discard_trimmed_pass at the moment
            save_trimmed_fail,
            save_merged
        )

        fastq    = FASTP.out.reads
        versions = versions.mix(FASTP.out.versions)
    }

    // ALIGN
    if (!params.umi_read_structure || (params.umi_read_structure && params.trim_fastq)) {
        // Align
        sort = true
        BWA_MEM(fastq, bwa, [[id:'no_fasta'], []], sort)

        bam      = BWA_MEM.out.bam
        versions = versions.mix(BWA_MEM.out.versions)
    }






    //
    // Collate and save software versions
    //
    softwareVersionsToYAML(versions)
        .collectFile(
            storeDir: "${params.outdir}/pipeline_info",
            name:  ''  + 'pipeline_software_' +  'mqc_'  + 'versions.yml',
            sort: true,
            newLine: true
        ).set { collated_versions }

    //
    // MODULE: MultiQC
    //
    multiqc_config = Channel.fromPath("$projectDir/assets/multiqc_config.yml", checkIfExists: true)

    multiqc_custom_config = params.multiqc_config ?
        Channel.fromPath(params.multiqc_config, checkIfExists: true) :
        Channel.empty()

    multiqc_logo = params.multiqc_logo ?
        Channel.fromPath(params.multiqc_logo, checkIfExists: true) :
        Channel.empty()

    summary_params = paramsSummaryMap(workflow, parameters_schema: "nextflow_schema.json")
    workflow_summary = Channel.value(paramsSummaryMultiqc(summary_params))
    multiqc_files = multiqc_files.mix(workflow_summary.collectFile(name: 'workflow_summary_mqc.yaml'))

    multiqc_custom_methods_description = params.multiqc_methods_description ?
        file(params.multiqc_methods_description, checkIfExists: true) :
        file("$projectDir/assets/methods_description_template.yml", checkIfExists: true)

    methods_description = Channel.value(methodsDescriptionText(multiqc_custom_methods_description))

    multiqc_files = multiqc_files.mix(collated_versions)
    multiqc_files = multiqc_files.mix(
        methods_description.collectFile(
            name: 'methods_description_mqc.yaml',
            sort: true
        )
    )

    MULTIQC(
        multiqc_files.collect(),
        multiqc_config.toList(),
        multiqc_custom_config.toList(),
        multiqc_logo.toList(),
        [],
        []
    )

    emit:
    multiqc_report = MULTIQC.out.report.toList() // channel: /path/to/multiqc_report.html
    versions       = versions                    // channel: [ path(versions.yml) ]
}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    THE END
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
